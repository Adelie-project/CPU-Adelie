誤りがあるとまずいので点検がてら
結果さえ同じならば問題はない（例えば内部ではプログラムカウンタは1ずつ増えている、等）

バイトオーダー：リトルエンディアン
　linuxも同じなので,あるバイナリファイルを読むと
  $ od -Ax -tx1 test.bin
  000000 13 03 00 00 13 05 00 7d 93 05 d0 07 93 03 00 00
  ...
  $ od -Ax -tx4 test.bin
  000000 00000313 7d000513 07d00593 00000393
  ...
  となる。

プログラムカウンタ：
  4ずつ増える

命令：
lui rd, imm
  (load upper immediate)
  32bit定数(ただし上位20bitのみ,下位12bitはゼロ埋め)の生成
auipc rd, imm
  (add upper immediate to pc)
  pcに32bit定数(ただし下位12bitはゼロ埋め)を加える
  新たなpcの値をrdに入れる
  (auipcとjajrを組み合わせて任意のpcを取ることができるようになる)
jal rd, imm
  (jump and link)
  immは符号付きオフセット,2(バイト)の倍数を取るためimm[0]はフェッチしてきた命令にはない
  符号付き21bit定数であることに注意,範囲は,-1048576~1048575
  (命令長は全て4バイトの倍数なのでimm[1]も必然的に0だと思うのだが…)
  次のpc=今のpc+imm
  rd=今のpc+4
  つまり,pc=100(十進) jal r5, -32 では,次のpc=68,r5=104となる
jalr rd, rs1, imm
  (jump and link register)
  immは符号付き12bit定数,よって範囲は,-2048~2047
  次のpc=(rs1+imm)の最下位ビットを0としたもの
  rd=今のpc+4
  つまり,pc=100 jalr r5, r6, -32 では,次のpc=r6-32,r5=104となる
bxx rs1, rs2, imm
  (branch instructions)
  immはやはり2の倍数を取るためimm[0]はフェッチして来た命令にはない
  符号付き13bit定数であることに注意,範囲は,-4096~4095
  (分岐する場合)次のpc=今のpc+imm
lx rd, rs1, imm
  (load instructions)
  符号拡張かゼロ埋めか,それとリトルエンディアンであることに注意
  例えば, lh r5, r6, 12 では、 r5 = (M[r6+12]+(M[r6+13]<<8))の先頭ビットを32bitまで符号拡張
sx rs1, rs2, imm
  (store instructions)
  こちらもリトルエンディアンに注意、shとsbはいずれもレジスタの下位ビットの方をストア
